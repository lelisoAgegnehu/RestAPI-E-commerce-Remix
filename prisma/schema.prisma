// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  phone     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Product {
  id           String       @id @default(uuid())
  name         String
  description  String?
  price        Float
  stock        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Category     Category?    @relation(fields: [categoryId], references: [id])
  categoryId   String?
  OrderDetails OrderItems[]
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id        String       @id @default(uuid())
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  orderList OrderItems[]
  Payment   Payment[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model OrderItems {
  id        String   @id @default(uuid())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  amount    Float
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String
}

enum Status {
  PENDING
  PAID
  FAILED
}

// registerUser
// signinUser
// createCategory
// getCategory
// createProduct
// updateProduct
// getProducts
// createOrder
// getOrders
// getPayments
